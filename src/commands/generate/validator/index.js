import fs from 'fs';

import {
	DEFAULT_NUMBER_OF_ARRAY_DATA,
	MAX_NUMBER_OF_ARRAY_DATA
} from '../const/index.js';
import { Logger } from '../logger/index.js';

/**
 * @typedef {Object} ValidatedValues
 * @property {string} inputPath - openapi yaml file path
 * @property {string} outputPath - output file path
 * @property {boolean} stateless - wheater if stateless or not
 * @property {number} numberOfData - the number of test data. default: 3
 * @property {Array<string>} ignoreList - The list of not output files
 * @property {string} extension - output file extension
 * @property {boolean} exampleSuffix - wheater if need for exampleSuffix
 * @property {boolean} ai - use ai to generate data
 * @property {boolean} apiKey - apiKey for openai
 * @property {boolean} avoidAi - The list of not be generated by ai
 *
 * @param {*} args
 * @returns {Promise<ValidatedValues>} validated values
 */
export const validate = async (args) => {
	const inputPath = args.input;
	const ai = args['ai'] == 'true' ? true : false; // default: false
	const apiKey = args['apiKey'];
	if (ai && apiKey === undefined) {
		Logger.error('--api-key is not specified.');
		process.exit(1);
	}
	if (ai && apiKey) {
		Logger.syslog('Generating test data with OpenAI..');
	}
	let stateless = args['stateless'] == 'false' || ai ? false : true; // default: true. if ai mode is true then stateless mode is false
	const outputPath =
		args.output.slice(-1) === '/' ? args.output.slice(0, -1) : args.output;
	const numberOfData = args['numberOfArrayData']
		? args['numberOfArrayData']
		: DEFAULT_NUMBER_OF_ARRAY_DATA;

	if (numberOfData < 1 || numberOfData > MAX_NUMBER_OF_ARRAY_DATA) {
		Logger.error(
			`Unexpected number of array test data! 0 < numberOfData < ${MAX_NUMBER_OF_ARRAY_DATA}`
		);
		process.exit(1);
	}
	if (numberOfData > 10 && ai) {
		Logger.error(
			`When using ai mode, it is not possible to create more than 10 data`
		);
		process.exit(1);
	}
	const ignoreList = args.ignore
		? args.ignore.replaceAll(' ', '').split(',')
		: [];
	const avoidAIGenerateList = args.avoidAi
		? args.avoidAi.replaceAll(' ', '').split(',')
		: [];
	const extension = args['extension'] ? args['extension'] : '.ts';
	const exampleSuffix =
		args['exampleSuffix'] === undefined || args['exampleSuffix'] === 'true'; // default: true
	if (extension !== '.js' && extension !== '.ts' && extension !== '.json') {
		Logger.error('Unexpected extension. Please specify .js | .ts | .json');
		process.exit(1);
	}

	if (!(await fs.existsSync(inputPath.replaceAll(' ', '')))) {
		Logger.error(`${inputPath}: No such file or directory`);
		process.exit(1);
	}

	if (!(await fs.existsSync(outputPath.replaceAll(' ', '')))) {
		Logger.error(`${outputPath}: No such file or directory`);
		process.exit(1);
	}
	return {
		inputPath,
		ai,
		outputPath,
		stateless,
		numberOfData,
		ignoreList,
		extension,
		exampleSuffix,
		avoidAIGenerateList,
		apiKey
	};
};
